<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>xlrte Blog</title>
        <link>https://xlrte.dev/blog</link>
        <description>xlrte Blog</description>
        <lastBuildDate>Mon, 15 Nov 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Announcing xlrte v0.1]]></title>
            <link>https://xlrte.dev/blog/announcing-xlrte-0-1</link>
            <guid>announcing-xlrte-0-1</guid>
            <pubDate>Mon, 15 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We are happy to announce the first release of xlrte ("accelerate"), a tool designed to take the heavy lifting out of deploying modern micro service architectures and reduce the effort required to setup dependent infrastructure.]]></description>
            <content:encoded><![CDATA[<p>We are happy to announce the first release of <code>xlrte</code> (<em>&quot;accelerate&quot;</em>), a tool designed to take the heavy lifting out of deploying modern micro service architectures and reduce the effort required to setup dependent infrastructure.</p><p>It is born out of the realisation that we as developers do not want to spend time configuring networks, secrets management, Identity &amp; Access Management. We simply want to be able to say <em>&quot;I need a database/message topic/storage bucket/etc&quot;</em>.</p><p>This is precisely the problem <code>xlrte</code> solves: you define your services, and tell the tool what dependent resources (like a database) they need, and <code>xlrte</code> figures out the rest, like setting up secrets, secure networks, identity &amp; permission management etc.
You can naturally step in and fine-tune resources, especially scaling parameters, but out of the box, it comes with sensible defaults and enough resources for testing- and development environments.</p><p>At the outset, we support <code>Google Cloud Platform</code> and the following services:</p><ul><li><code>Cloud Run</code> as a service runtime (Cloud Functions coming soon)</li><li><code>Cloud SQL</code> as a database</li><li><code>Pub/Sub</code> as messaging middleware </li><li><code>Cloud Storage</code> for block storage</li></ul><p>We will extend the coverage of both GCP services, as well as work towards supporting <em>AWS Serverless services</em> as well as likely Kubernetes based service runtimes in the future. The core CLI has an extensible API, which means anyone can create their own resource &amp; cloud provider implementations (API does not come with any stability promises before a <code>1.0</code> release though).</p><p>To learn more, please refer to <a href="http://localhost:3000/docs/intro">our documentation</a>!
For further help, please feel free to ask questions on <a href="https://discord.com/invite/PakzubspHR">Discord</a> or <a href="https://github.com/xlrte/core">Github</a>.</p>]]></content:encoded>
        </item>
    </channel>
</rss>