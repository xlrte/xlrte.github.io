"use strict";(self.webpackChunkxlrte_dev=self.webpackChunkxlrte_dev||[]).push([[306],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),l=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(i.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return t?n.createElement(f,s(s({ref:r},u),{},{components:t})):n.createElement(f,s({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8473:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),s=["components"],c={sidebar_position:1},i="What are Resources?",l={unversionedId:"xlrte concepts/resources/resources",id:"xlrte concepts/resources/resources",isDocsHomePage:!1,title:"What are Resources?",description:"Resources are the services, such as databases, messaging middle-ware, block storage services (GCS, S3) etc that a service could depend on.",source:"@site/docs/xlrte concepts/resources/resources.md",sourceDirName:"xlrte concepts/resources",slug:"/xlrte concepts/resources/resources",permalink:"/docs/xlrte concepts/resources/resources",editUrl:"https://github.com/xlrte/website/edit/main/docs/xlrte concepts/resources/resources.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Core Concepts",permalink:"/docs/xlrte concepts/core-concepts"},next:{title:"Cloud Run",permalink:"/docs/xlrte concepts/resources/gcp-resource-settings/cloudrun"}},u=[{value:"Example: a Postgres database",id:"example-a-postgres-database",children:[],level:2}],p={toc:u};function d(e){var r=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"what-are-resources"},"What are Resources?"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Resources")," are the services, such as databases, messaging middle-ware, block storage services (GCS, S3) etc that a service could depend on."),(0,a.kt)("p",null,"Typically resources will be identified by name and have two sets of configurations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Service configuration, in the ",(0,a.kt)("inlineCode",{parentName:"li"},"depends_on")," block."),(0,a.kt)("li",{parentName:"ul"},"Environment specific configuration in ",(0,a.kt)("inlineCode",{parentName:"li"},"resources.yaml"),", which tells of environment specific resources.")),(0,a.kt)("p",null,"The latter may not be necessary for all resources, and is not necessary for non-production environments, as all resources come pre-configured with sensible defaults for a cheap-to-run, low volume environment. However, where they are required, they will be separated as above, in order to enforce ",(0,a.kt)("em",{parentName:"p"},"separation of concerns"),"."),(0,a.kt)("h2",{id:"example-a-postgres-database"},"Example: a Postgres database"),(0,a.kt)("p",null,"Say we wanted to add a postgres database as a dependency to a service, we might add something like this to the service.yaml file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"depends_on:\n  cloudsql: \n  - name: my-pg-db\n    type: postgres\n\n")),(0,a.kt)("p",null,"Because GCP's ",(0,a.kt)("inlineCode",{parentName:"p"},"CloudSQL")," service is one that requires some settings to define resources allocated, we could have the following in an environment specific file, such as ",(0,a.kt)("inlineCode",{parentName:"p"},".xlrte/config/environments/prod/resources.yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"\n cloudsql:\n  - name: my-pg-db \n    machine_type: db-n1-standard-4\n    storage_size: 50\n")),(0,a.kt)("p",null,"This would tell GCP to allocate 50GB of db storage, using a ",(0,a.kt)("inlineCode",{parentName:"p"},"db-n1-standard-4")," instance. There are more configuration options available, which you can find in the ",(0,a.kt)("inlineCode",{parentName:"p"},"GCP Resource Reference")," section of this documentation."))}d.isMDXComponent=!0}}]);