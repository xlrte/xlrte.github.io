"use strict";(self.webpackChunkxlrte_dev=self.webpackChunkxlrte_dev||[]).push([[485],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=i(r),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var i=2;i<s;i++)a[i]=r[i];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5849:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return i},toc:function(){return u},default:function(){return d}});var n=r(7462),o=r(3366),s=(r(7294),r(3905)),a=["components"],c={sidebar_position:3},l="Cloud SQL",i={unversionedId:"xlrte-concepts/resources/gcp-resource-settings/cloudsql",id:"xlrte-concepts/resources/gcp-resource-settings/cloudsql",isDocsHomePage:!1,title:"Cloud SQL",description:"Currently, only Postgres databases are supported by xlrte. When you add a Cloud SQL dependency to a service, we will automatically create the following:",source:"@site/docs/xlrte-concepts/resources/gcp-resource-settings/cloudsql.md",sourceDirName:"xlrte-concepts/resources/gcp-resource-settings",slug:"/xlrte-concepts/resources/gcp-resource-settings/cloudsql",permalink:"/docs/xlrte-concepts/resources/gcp-resource-settings/cloudsql",editUrl:"https://github.com/xlrte/website/edit/main/docs/xlrte-concepts/resources/gcp-resource-settings/cloudsql.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Runtime: Cloud Run",permalink:"/docs/xlrte-concepts/resources/gcp-resource-settings/cloudrun"},next:{title:"Pub/Sub",permalink:"/docs/xlrte-concepts/resources/gcp-resource-settings/pubsub"}},u=[{value:"service.yaml",id:"serviceyaml",children:[{value:"resources.yaml",id:"resourcesyaml",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"cloud-sql"},"Cloud SQL"),(0,s.kt)("p",null,"Currently, only Postgres databases are supported by ",(0,s.kt)("em",{parentName:"p"},"xlrte"),". When you add a Cloud SQL dependency to a service, we will automatically create the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A private network to ensure the DB is secure"),(0,s.kt)("li",{parentName:"ul"},"Username and password secrets"),(0,s.kt)("li",{parentName:"ul"},"A serverless VPC so your service can connect to the database"),(0,s.kt)("li",{parentName:"ul"},"The database instance and database itself")),(0,s.kt)("h2",{id:"serviceyaml"},"service.yaml"),(0,s.kt)("p",null,"A Cloud SQL database is added in the ",(0,s.kt)("inlineCode",{parentName:"p"},"depends_on")," section of a service like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"## omitted part of service definition\ndepends_on:\n  cloudsql: \n  - name: my-pg-db\n    type: postgres\n")),(0,s.kt)("p",null,"This is all you need. But you can optionally define environment specific settings in ",(0,s.kt)("inlineCode",{parentName:"p"},"resources.yaml"),", as below:"),(0,s.kt)("h3",{id:"resourcesyaml"},"resources.yaml"),(0,s.kt)("p",null,"Below we show the available settings. All settings show their defaults, so if you want them, they can all be omitted."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'## omitted part of service definition\ncontext: some-project # project in GCP terms\nregion: europe-west6\nresources:\n  cloudsq:\n  - name: my-pg-db\n    machine_type: db-f1-micro # GCP machine type, default is db-f1-micro\n    size: 20 # GB size of db, default 10\n    delete_protection: false # default false\n    maintenance_window_hour: 7 # default 7, 07:00\n    maintenance_window_day: 7 # default 7, sunday\n    point_in_time_recovery_enabled: false # default false\n    backup_enabled: true # defaults to true\n    backup_start_time: "04:00" # time of backups to be started\n')))}d.isMDXComponent=!0}}]);