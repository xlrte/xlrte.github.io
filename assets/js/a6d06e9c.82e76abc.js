"use strict";(self.webpackChunkxlrte_dev=self.webpackChunkxlrte_dev||[]).push([[396],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,f=d["".concat(a,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=d;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9539:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),s=["components"],c={sidebar_position:2},a="Secrets",l={unversionedId:"xlrte-concepts/secrets",id:"xlrte-concepts/secrets",isDocsHomePage:!1,title:"Secrets",description:"Secrets management is built into xlrte and rests on the following principles:",source:"@site/docs/xlrte-concepts/secrets.md",sourceDirName:"xlrte-concepts",slug:"/xlrte-concepts/secrets",permalink:"/docs/xlrte-concepts/secrets",editUrl:"https://github.com/xlrte/website/edit/main/docs/xlrte-concepts/secrets.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core Concepts",permalink:"/docs/xlrte-concepts/core-concepts"},next:{title:"What are Resources?",permalink:"/docs/xlrte-concepts/resources"}},p=[{value:"Binding secrets to services",id:"binding-secrets-to-services",children:[],level:2}],u={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"secrets"},"Secrets"),(0,i.kt)("p",null,"Secrets management is built into ",(0,i.kt)("inlineCode",{parentName:"p"},"xlrte")," and rests on the following principles:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Secrets can be committed to git, as they are encrypted at rest."),(0,i.kt)("li",{parentName:"ul"},"Secrets are environment specific, thus allowing different versions of the same secrets between environments. This also allows different people to have different privileges to access secrets."),(0,i.kt)("li",{parentName:"ul"},"Secrets will be stored in your cloud providers native secret store, for instance Secret Manager for Google Cloud Platform.")),(0,i.kt)("p",null,"For more help on how to use xlrte secrets, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"xlrte secret")," sub-command to get help.\nNoteworthy is, when a new person is added to the project, they should run ",(0,i.kt)("inlineCode",{parentName:"p"},"xlrte secret init -e [env]"),", push the changes including their public-key entry, and ask someone who already has access to run the ",(0,i.kt)("inlineCode",{parentName:"p"},"xlrte secret refresh")," command, to give them access."),(0,i.kt)("h2",{id:"binding-secrets-to-services"},"Binding secrets to services"),(0,i.kt)("p",null,"For resources managed by ",(0,i.kt)("inlineCode",{parentName:"p"},"xlrte"),", such as Cloud SQL, secrets are automatically created and bound to the services."),(0,i.kt)("p",null,"For services added by developers with ",(0,i.kt)("inlineCode",{parentName:"p"},"xlrte secret add"),", a reference must be added in the ",(0,i.kt)("inlineCode",{parentName:"p"},"service.yaml")," for the given service, in the top-level ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," block, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"env:\n  secrets:\n    api_key: my-api-key\n")),(0,i.kt)("p",null,"The above would bind the secret ",(0,i.kt)("inlineCode",{parentName:"p"},"my-api-key")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"api_key")," environment variable at runtime."))}d.isMDXComponent=!0}}]);