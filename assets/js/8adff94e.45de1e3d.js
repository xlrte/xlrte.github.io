"use strict";(self.webpackChunkxlrte_dev=self.webpackChunkxlrte_dev||[]).push([[222],{3905:function(e,n,r){r.d(n,{Zo:function(){return l},kt:function(){return d}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=t.createContext({}),u=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},l=function(e){var n=u(e.components);return t.createElement(a.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(r),d=o,f=m["".concat(a,".").concat(d)]||m[d]||p[d]||s;return r?t.createElement(f,c(c({ref:n},l),{},{components:r})):t.createElement(f,c({ref:n},l))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=r.length,c=new Array(s);c[0]=m;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<s;u++)c[u]=r[u];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6244:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var t=r(7462),o=r(3366),s=(r(7294),r(3905)),c=["components"],i={sidebar_position:2},a="Runtime: Cloud Run",u={unversionedId:"xlrte-concepts/resources/gcp-resource-settings/cloudrun",id:"xlrte-concepts/resources/gcp-resource-settings/cloudrun",isDocsHomePage:!1,title:"Runtime: Cloud Run",description:"Cloud Run is purely a runtime for your services.",source:"@site/docs/xlrte-concepts/resources/gcp-resource-settings/cloudrun.md",sourceDirName:"xlrte-concepts/resources/gcp-resource-settings",slug:"/xlrte-concepts/resources/gcp-resource-settings/cloudrun",permalink:"/docs/xlrte-concepts/resources/gcp-resource-settings/cloudrun",editUrl:"https://github.com/xlrte/website/edit/main/docs/xlrte-concepts/resources/gcp-resource-settings/cloudrun.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Google Cloud Platform Resources",permalink:"/docs/xlrte-concepts/resources/gcp-resource-settings/gcp"},next:{title:"Cloud SQL",permalink:"/docs/xlrte-concepts/resources/gcp-resource-settings/cloudsql"}},l=[{value:"service.yaml",id:"serviceyaml",children:[{value:"resources.yaml",id:"resourcesyaml",children:[],level:3}],level:2}],p={toc:l};function m(e){var n=e.components,r=(0,o.Z)(e,c);return(0,s.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"runtime-cloud-run"},"Runtime: Cloud Run"),(0,s.kt)("p",null,"Cloud Run is purely a ",(0,s.kt)("inlineCode",{parentName:"p"},"runtime")," for your services."),(0,s.kt)("p",null,"As per ",(0,s.kt)("em",{parentName:"p"},"xlrte")," convention, the main definition goes into ",(0,s.kt)("inlineCode",{parentName:"p"},".xlrte/config/services[filename].yaml"),", where you can give your services any file-name as long as it ends with ",(0,s.kt)("inlineCode",{parentName:"p"},".yaml")," or ",(0,s.kt)("inlineCode",{parentName:"p"},".yml"),"."),(0,s.kt)("p",null,"Extra resources are defined in the environment specific ",(0,s.kt)("inlineCode",{parentName:"p"},"resources.yaml")," file, which lives in ",(0,s.kt)("inlineCode",{parentName:"p"},".xlrte/config/environments/[env name]"),"."),(0,s.kt)("h2",{id:"serviceyaml"},"service.yaml"),(0,s.kt)("p",null,"As mentioned above, can be named whatever you want.\nExplanations of settings inline."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"name: cloudrun-srv2 # name, must be unique\nruntime: cloudrun\nspec:\n  base_name: hello-app # basename of the Google Container Registry artifact\n  http:\n    public: true # publicly exposed http endpoint?\n    http2: false # use http2, for instance for protobuf?\ndepends_on: # resource dependencies go here\n  cloudstorage: #example of a GCS bucket dependency\n  - name: foo-bucket\n    access: readwrite\n  cloudrun: # you can also connect cloudrun services with other services\n  - name: other-service # name of other service\n    env: OTHER_URL #env variable to inject URL into\nenv: # environment vars\n  vars: # regular variables, can be overriden in resources\n    foo: bar # env var name & value\n  secrets: # secrets\n    very_secret: very-secret #env var name + secret name (by reference)\n")),(0,s.kt)("h3",{id:"resourcesyaml"},"resources.yaml"),(0,s.kt)("p",null,"By default, you don't have to add ",(0,s.kt)("em",{parentName:"p"},"anything")," into the env specific ",(0,s.kt)("inlineCode",{parentName:"p"},"resources.yaml")," as sensible defaults are provided, but you can set the following settings (complete ",(0,s.kt)("inlineCode",{parentName:"p"},"resources.yaml")," shown):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"context: some-project # project in GCP terms\nregion: europe-west6\nresources:\n  cloudrun: # provide a list of services, referenced by name to set resources for each service\n  - name: cloudrun-srv # name of service we are defining resources for\n    domain: # you can attach a GCP managed domain, with an SSL cert & Load balancer by adding this.\n      name: cde.app \n      dns_zone: cdeapp # GCP project dns_zone for the domain\n    memory: 512Mi # memory settings for Cloud Run\n    cpu: 1 # CPU settings for Cloud Run\n    timeout: 300 # request time out\n    max_requests: 80 # max requests per container\n    scaling: #scaling settings for Cloud Run\n      min_instances: 0\n      max_instances: 100\n\n")))}m.isMDXComponent=!0}}]);